diff --git a/core/v1/objectreference.go b/core/v1/objectreference.go
index ee5335e..0c6f84a 100644
--- a/core/v1/objectreference.go
+++ b/core/v1/objectreference.go
@@ -23,11 +23,12 @@ import (
 // IsAnAPIObject allows clients to preemptively get a reference to an API object and pass it to places that
 // intend only to get a reference to that object. This simplifies the event recording interface.
 func (obj *ObjectReference) SetGroupVersionKind(gvk schema.GroupVersionKind) {
-	obj.APIVersion, obj.Kind = gvk.ToAPIVersionAndKind()
+	obj.APIVersion, obj.Kind = new(string), new(string)
+	*obj.APIVersion, *obj.Kind = gvk.ToAPIVersionAndKind()
 }
 
 func (obj *ObjectReference) GroupVersionKind() schema.GroupVersionKind {
-	return schema.FromAPIVersionAndKind(obj.APIVersion, obj.Kind)
+	return schema.FromAPIVersionAndKind(value(obj.APIVersion), value(obj.Kind))
 }
 
 func (obj *ObjectReference) GetObjectKind() schema.ObjectKind { return obj }
diff --git a/core/v1/taint.go b/core/v1/taint.go
index db71bd2..5eaad2e 100644
--- a/core/v1/taint.go
+++ b/core/v1/taint.go
@@ -16,7 +16,9 @@ limitations under the License.
 
 package v1
 
-import "fmt"
+import (
+	"fmt"
+)
 
 // MatchTaint checks if the taint matches taintToMatch. Taints are unique by key:effect,
 // if the two taints have same key:effect, regard as they match.
@@ -26,14 +28,21 @@ func (t *Taint) MatchTaint(taintToMatch *Taint) bool {
 
 // taint.ToString() converts taint struct to string in format '<key>=<value>:<effect>', '<key>=<value>:', '<key>:<effect>', or '<key>'.
 func (t *Taint) ToString() string {
-	if len(t.Effect) == 0 {
-		if len(t.Value) == 0 {
+	if len(value(t.Effect)) == 0 {
+		if len(value(t.Value)) == 0 {
 			return fmt.Sprintf("%v", t.Key)
 		}
 		return fmt.Sprintf("%v=%v:", t.Key, t.Value)
 	}
-	if len(t.Value) == 0 {
+	if len(value(t.Value)) == 0 {
 		return fmt.Sprintf("%v:%v", t.Key, t.Effect)
 	}
 	return fmt.Sprintf("%v=%v:%v", t.Key, t.Value, t.Effect)
 }
+
+func value[T any](v *T) (z T) {
+	if v != nil {
+		return *v
+	}
+	return
+}
diff --git a/core/v1/toleration.go b/core/v1/toleration.go
index 9341abf..796619a 100644
--- a/core/v1/toleration.go
+++ b/core/v1/toleration.go
@@ -36,16 +36,16 @@ func (t *Toleration) MatchToleration(tolerationToMatch *Toleration) bool {
 //     If toleration.key is empty, toleration.operator must be 'Exists';
 //     this combination means to match all taint values and all taint keys.
 func (t *Toleration) ToleratesTaint(taint *Taint) bool {
-	if len(t.Effect) > 0 && t.Effect != taint.Effect {
+	if len(value(t.Effect)) > 0 && value(t.Effect) != value(taint.Effect) {
 		return false
 	}
 
-	if len(t.Key) > 0 && t.Key != taint.Key {
+	if len(value(t.Key)) > 0 && value(t.Key) != value(taint.Key) {
 		return false
 	}
 
 	// TODO: Use proper defaulting when Toleration becomes a field of PodSpec
-	switch t.Operator {
+	switch value(t.Operator) {
 	// empty operator means Equal
 	case "", TolerationOpEqual:
 		return t.Value == taint.Value
